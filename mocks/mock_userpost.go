// Code generated by MockGen. DO NOT EDIT.
// Source: repository/repository_interface.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/sapawarga/userpost-service/model"
)

// MockPostI is a mock of PostI interface.
type MockPostI struct {
	ctrl     *gomock.Controller
	recorder *MockPostIMockRecorder
}

// MockPostIMockRecorder is the mock recorder for MockPostI.
type MockPostIMockRecorder struct {
	mock *MockPostI
}

// NewMockPostI creates a new mock instance.
func NewMockPostI(ctrl *gomock.Controller) *MockPostI {
	mock := &MockPostI{ctrl: ctrl}
	mock.recorder = &MockPostIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostI) EXPECT() *MockPostIMockRecorder {
	return m.recorder
}

// AddLikeOnPost mocks base method.
func (m *MockPostI) AddLikeOnPost(ctx context.Context, request *model.AddOrRemoveLikeOnPostRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLikeOnPost", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLikeOnPost indicates an expected call of AddLikeOnPost.
func (mr *MockPostIMockRecorder) AddLikeOnPost(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLikeOnPost", reflect.TypeOf((*MockPostI)(nil).AddLikeOnPost), ctx, request)
}

// CheckHealthReadiness mocks base method.
func (m *MockPostI) CheckHealthReadiness(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckHealthReadiness", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckHealthReadiness indicates an expected call of CheckHealthReadiness.
func (mr *MockPostIMockRecorder) CheckHealthReadiness(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckHealthReadiness", reflect.TypeOf((*MockPostI)(nil).CheckHealthReadiness), ctx)
}

// CheckIsExistLikeOnPostBy mocks base method.
func (m *MockPostI) CheckIsExistLikeOnPostBy(ctx context.Context, request *model.AddOrRemoveLikeOnPostRequest) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIsExistLikeOnPostBy", ctx, request)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIsExistLikeOnPostBy indicates an expected call of CheckIsExistLikeOnPostBy.
func (mr *MockPostIMockRecorder) CheckIsExistLikeOnPostBy(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIsExistLikeOnPostBy", reflect.TypeOf((*MockPostI)(nil).CheckIsExistLikeOnPostBy), ctx, request)
}

// GetActor mocks base method.
func (m *MockPostI) GetActor(ctx context.Context, id int64) (*model.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActor", ctx, id)
	ret0, _ := ret[0].(*model.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActor indicates an expected call of GetActor.
func (mr *MockPostIMockRecorder) GetActor(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActor", reflect.TypeOf((*MockPostI)(nil).GetActor), ctx, id)
}

// GetDetailPost mocks base method.
func (m *MockPostI) GetDetailPost(ctx context.Context, id int64) (*model.PostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailPost", ctx, id)
	ret0, _ := ret[0].(*model.PostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailPost indicates an expected call of GetDetailPost.
func (mr *MockPostIMockRecorder) GetDetailPost(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailPost", reflect.TypeOf((*MockPostI)(nil).GetDetailPost), ctx, id)
}

// GetListPost mocks base method.
func (m *MockPostI) GetListPost(ctx context.Context, request *model.UserPostRequest) ([]*model.PostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListPost", ctx, request)
	ret0, _ := ret[0].([]*model.PostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListPost indicates an expected call of GetListPost.
func (mr *MockPostIMockRecorder) GetListPost(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListPost", reflect.TypeOf((*MockPostI)(nil).GetListPost), ctx, request)
}

// GetListPostByMe mocks base method.
func (m *MockPostI) GetListPostByMe(ctx context.Context, request *model.UserPostByMeRequest) ([]*model.PostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListPostByMe", ctx, request)
	ret0, _ := ret[0].([]*model.PostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListPostByMe indicates an expected call of GetListPostByMe.
func (mr *MockPostIMockRecorder) GetListPostByMe(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListPostByMe", reflect.TypeOf((*MockPostI)(nil).GetListPostByMe), ctx, request)
}

// GetMetadataPost mocks base method.
func (m *MockPostI) GetMetadataPost(ctx context.Context, request *model.UserPostRequest) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadataPost", ctx, request)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadataPost indicates an expected call of GetMetadataPost.
func (mr *MockPostIMockRecorder) GetMetadataPost(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadataPost", reflect.TypeOf((*MockPostI)(nil).GetMetadataPost), ctx, request)
}

// GetMetadataPostByMe mocks base method.
func (m *MockPostI) GetMetadataPostByMe(ctx context.Context, request *model.UserPostByMeRequest) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadataPostByMe", ctx, request)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadataPostByMe indicates an expected call of GetMetadataPostByMe.
func (mr *MockPostIMockRecorder) GetMetadataPostByMe(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadataPostByMe", reflect.TypeOf((*MockPostI)(nil).GetMetadataPostByMe), ctx, request)
}

// InsertPost mocks base method.
func (m *MockPostI) InsertPost(ctx context.Context, request *model.CreateNewPostRequestRepository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPost", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertPost indicates an expected call of InsertPost.
func (mr *MockPostIMockRecorder) InsertPost(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPost", reflect.TypeOf((*MockPostI)(nil).InsertPost), ctx, request)
}

// RemoveLikeOnPost mocks base method.
func (m *MockPostI) RemoveLikeOnPost(ctx context.Context, request *model.AddOrRemoveLikeOnPostRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLikeOnPost", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveLikeOnPost indicates an expected call of RemoveLikeOnPost.
func (mr *MockPostIMockRecorder) RemoveLikeOnPost(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLikeOnPost", reflect.TypeOf((*MockPostI)(nil).RemoveLikeOnPost), ctx, request)
}

// UpdateStatusOrTitle mocks base method.
func (m *MockPostI) UpdateStatusOrTitle(ctx context.Context, request *model.UpdatePostRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusOrTitle", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatusOrTitle indicates an expected call of UpdateStatusOrTitle.
func (mr *MockPostIMockRecorder) UpdateStatusOrTitle(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusOrTitle", reflect.TypeOf((*MockPostI)(nil).UpdateStatusOrTitle), ctx, request)
}

// MockCommentI is a mock of CommentI interface.
type MockCommentI struct {
	ctrl     *gomock.Controller
	recorder *MockCommentIMockRecorder
}

// MockCommentIMockRecorder is the mock recorder for MockCommentI.
type MockCommentIMockRecorder struct {
	mock *MockCommentI
}

// NewMockCommentI creates a new mock instance.
func NewMockCommentI(ctrl *gomock.Controller) *MockCommentI {
	mock := &MockCommentI{ctrl: ctrl}
	mock.recorder = &MockCommentIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentI) EXPECT() *MockCommentIMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCommentI) Create(ctx context.Context, req *model.CreateCommentRequestRepository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCommentIMockRecorder) Create(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCommentI)(nil).Create), ctx, req)
}

// GetCommentsByPostID mocks base method.
func (m *MockCommentI) GetCommentsByPostID(ctx context.Context, id int64) ([]*model.CommentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsByPostID", ctx, id)
	ret0, _ := ret[0].([]*model.CommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsByPostID indicates an expected call of GetCommentsByPostID.
func (mr *MockCommentIMockRecorder) GetCommentsByPostID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsByPostID", reflect.TypeOf((*MockCommentI)(nil).GetCommentsByPostID), ctx, id)
}

// GetLastComment mocks base method.
func (m *MockCommentI) GetLastComment(ctx context.Context, id int64) (*model.CommentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastComment", ctx, id)
	ret0, _ := ret[0].(*model.CommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastComment indicates an expected call of GetLastComment.
func (mr *MockCommentIMockRecorder) GetLastComment(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastComment", reflect.TypeOf((*MockCommentI)(nil).GetLastComment), ctx, id)
}

// GetTotalComments mocks base method.
func (m *MockCommentI) GetTotalComments(ctx context.Context, userPostID int64) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalComments", ctx, userPostID)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalComments indicates an expected call of GetTotalComments.
func (mr *MockCommentIMockRecorder) GetTotalComments(ctx, userPostID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalComments", reflect.TypeOf((*MockCommentI)(nil).GetTotalComments), ctx, userPostID)
}
