// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sapawarga/userpost-service/repository (interfaces: CommentI)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	model "github.com/sapawarga/userpost-service/model"
	reflect "reflect"
)

// MockCommentI is a mock of CommentI interface
type MockCommentI struct {
	ctrl     *gomock.Controller
	recorder *MockCommentIMockRecorder
}

// MockCommentIMockRecorder is the mock recorder for MockCommentI
type MockCommentIMockRecorder struct {
	mock *MockCommentI
}

// NewMockCommentI creates a new mock instance
func NewMockCommentI(ctrl *gomock.Controller) *MockCommentI {
	mock := &MockCommentI{ctrl: ctrl}
	mock.recorder = &MockCommentIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommentI) EXPECT() *MockCommentIMockRecorder {
	return m.recorder
}

// GetCommentsByPostID mocks base method
func (m *MockCommentI) GetCommentsByPostID(arg0 context.Context, arg1 int64) ([]*model.CommentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsByPostID", arg0, arg1)
	ret0, _ := ret[0].([]*model.CommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsByPostID indicates an expected call of GetCommentsByPostID
func (mr *MockCommentIMockRecorder) GetCommentsByPostID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsByPostID", reflect.TypeOf((*MockCommentI)(nil).GetCommentsByPostID), arg0, arg1)
}

// GetLastComment mocks base method
func (m *MockCommentI) GetLastComment(arg0 context.Context, arg1 int64) (*model.CommentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastComment", arg0, arg1)
	ret0, _ := ret[0].(*model.CommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastComment indicates an expected call of GetLastComment
func (mr *MockCommentIMockRecorder) GetLastComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastComment", reflect.TypeOf((*MockCommentI)(nil).GetLastComment), arg0, arg1)
}

// GetTotalComments mocks base method
func (m *MockCommentI) GetTotalComments(arg0 context.Context, arg1 int64) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalComments", arg0, arg1)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalComments indicates an expected call of GetTotalComments
func (mr *MockCommentIMockRecorder) GetTotalComments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalComments", reflect.TypeOf((*MockCommentI)(nil).GetTotalComments), arg0, arg1)
}
